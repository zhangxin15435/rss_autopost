name: 📡 RSS到Medium自动发布

# 设置权限
permissions:
  contents: write
  pages: write
  id-token: write

on:
  # 当CSV文件有变化时触发
  push:
    paths:
      - '内容库_发布数据@zc_发布情况.csv'
      - 'src/**'
    branches:
      - main
  
  # 定时运行（每天检查一次）
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点运行
  
  # 手动触发
  workflow_dispatch:
    inputs:
      mode:
        description: '运行模式'
        required: true
        default: 'blog'
        type: choice
        options:
        - full     # 完整流程：生成博客 + Playwright发布到Medium + 部署
        - blog     # 仅生成博客和RSS
        - medium   # 仅使用Playwright发布到Medium
        - status   # 仅检查状态
      publish_method:
        description: 'Medium发布方式'
        required: false
        default: 'playwright'
        type: choice
        options:
        - playwright  # Playwright自动化 (推荐)
        - api         # Medium API

jobs:
  publish:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 设置pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        
    - name: 🔧 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: 📦 安装依赖
      run: pnpm install --frozen-lockfile
    
    - name: 🎭 安装Playwright浏览器
      run: pnpm exec playwright install chromium --with-deps
    
    - name: 🔍 验证环境配置
      run: pnpm run validate-env
      env:
        # RSS Feed URL
        RSS_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/feed.xml
        
        # Medium发布方式选择 ('playwright' 或 'api')
        MEDIUM_PUBLISH_METHOD: ${{ github.event.inputs.publish_method || secrets.MEDIUM_PUBLISH_METHOD || 'playwright' }}
        
        # Playwright方式 (推荐，稳定性高)
        MEDIUM_EMAIL: ${{ secrets.MEDIUM_EMAIL }}
        MEDIUM_PASSWORD: ${{ secrets.MEDIUM_PASSWORD }}
        MEDIUM_HEADLESS: 'true'  # GitHub Actions中必须无头模式
        MEDIUM_TIMEOUT: '60000'  # 60秒超时
        MEDIUM_RETRIES: '3'      # 重试3次
        
        # API方式 (备用)
        MEDIUM_INTEGRATION_TOKEN: ${{ secrets.MEDIUM_INTEGRATION_TOKEN }}
        MEDIUM_SESSION_TOKEN: ${{ secrets.MEDIUM_SESSION_TOKEN }}
        MEDIUM_USER_ID: ${{ secrets.MEDIUM_USER_ID }}
        
        # 环境标识
        CI: 'true'
    
    - name: 📊 检查系统状态
      run: pnpm start status
      
    - name: 📝 生成博客和RSS
      run: pnpm start blog
      env:
        ALLOW_REPUBLISH: 'true'  # 测试模式：允许重新发布已完成的文章
      continue-on-error: false
    
    - name: 🚀 构建Jekyll站点
      uses: actions/jekyll-build-pages@v1
      with:
        source: ./
        destination: ./_site
    
    - name: 🖥️ 设置虚拟显示器 (Playwright需要)
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: 📤 发布到Medium (仅在配置了认证信息时)
      if: ${{ github.event.inputs.mode == 'full' || github.event.inputs.mode == 'medium' }}
      run: pnpm start single
      env:
        # RSS Feed URL
        RSS_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/feed.xml
        
        # Medium发布方式选择 ('playwright' 或 'api')
        MEDIUM_PUBLISH_METHOD: ${{ github.event.inputs.publish_method || secrets.MEDIUM_PUBLISH_METHOD || 'playwright' }}
        
        # Playwright方式 (推荐，稳定性高)
        MEDIUM_EMAIL: ${{ secrets.MEDIUM_EMAIL }}
        MEDIUM_PASSWORD: ${{ secrets.MEDIUM_PASSWORD }}
        MEDIUM_HEADLESS: 'true'  # GitHub Actions中必须无头模式
        MEDIUM_TIMEOUT: '60000'  # 60秒超时
        MEDIUM_RETRIES: '3'      # 重试3次
        
        # API方式 (备用)
        MEDIUM_INTEGRATION_TOKEN: ${{ secrets.MEDIUM_INTEGRATION_TOKEN }}
        MEDIUM_SESSION_TOKEN: ${{ secrets.MEDIUM_SESSION_TOKEN }}
        MEDIUM_USER_ID: ${{ secrets.MEDIUM_USER_ID }}
        
        # 环境标识
        CI: 'true'
        DISPLAY: ':99'  # 虚拟显示器
      continue-on-error: true
    
    - name: 🔄 提交更改
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if git diff --staged --quiet; then
          echo "没有变化需要提交"
        else
          git commit -m "🤖 自动更新博客文章和RSS Feed"
          git push
        fi
    
    - name: 📋 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: site-build
        path: |
          _site/
          feed.xml
          atom.xml
          published_articles.json
    
    - name: 📊 生成报告
      run: |
        echo "## 📈 发布报告" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ 构建时间: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 文章数量: $(find _posts -name "*.md" 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- 📡 RSS文件: $([ -f feed.xml ] && echo "✅" || echo "❌")" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 站点: $([ -d _site ] && echo "✅" || echo "❌")" >> $GITHUB_STEP_SUMMARY

  # 部署到GitHub Pages
  deploy-pages:
    needs: publish
    runs-on: ubuntu-latest
    
    # 只在主分支运行
    if: github.ref == 'refs/heads/main'
    
    # 授予GITHUB_TOKEN权限以部署到Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # 只允许一个并发部署
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: site-build
        path: ./
    
    - name: 🔧 设置Pages
      uses: actions/configure-pages@v4
    
    - name: 📤 上传到Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site
    
    - name: 🌐 部署到GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # 通知任务（可选）
  notify:
    needs: [publish, deploy-pages]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 发送通知
      run: |
        if [ "${{ needs.publish.result }}" == "success" ] && [ "${{ needs.deploy-pages.result }}" == "success" ]; then
          echo "✅ 发布成功完成！"
          echo "🌐 网站: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "📡 RSS: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/feed.xml"
        else
          echo "❌ 发布过程中出现问题"
          echo "📝 发布结果: ${{ needs.publish.result }}"
          echo "🌐 部署结果: ${{ needs.deploy-pages.result }}"
        fi 